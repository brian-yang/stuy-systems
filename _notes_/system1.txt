Systems
======================
10/7
Aim: Structured programming 

void *
     The dynamic memory functions deal in arbitrary blocks of memory. There is no regular type associated wtih the block.
     
     void * is considered to be a pointer to a 1 byte block of memory, so pointer arithmetic will be based on 1. 

     Whenever possibly you should typecast void * values to the appropriate type.
     ex:
	int *ip;
	ip = (int *) malloc( 20 * sizeof(int) );

     You have to malloc or calloc before realloc. Must free all malloc or calloc memory.

Struct
     A collection of values in a single data type

     struct {int a ; char x; } s;
     	    Here s is a variable of type struct { int a; char x; }
	    8 bytes for each variable for sizeof(s) (might have dif results based on computer)

     struct {
     	    int a;
	    char x;
     } s;

     struct foo { int a; char x; };
     	    in this example, foo is a prototype for this kind of struct, to be used later;

     struct foo s;

     We use the . operator to access a value inside struct.
     s.x = 5;
     s.name = "the";

     . binds before *
     	    To access data from a struct pointer you can either
	    struct foo *p;
	    p = &s;
	    (*p).x; // same as p->x, p must point to a struct

===========================================
10/11
Aim: get dem bugs

Do now: what's wrong with this function?
   
struct node * insert_front( struct node * n, int i ) {
       struct node new;
       
       new.i = i;
       new.next = n;
       
       return &new;
}

mem allocated at compile time is stack memory; results in seg fault
needs to be dynamically allocated, malloc

Typedef
	Provide a new name for an existing data type.

	typedef <real type> <new name>

	ex:
		typedef unsigned long size_t;
		size_t x = 139; // x is really an unsigned long
		
		typedef short[10] list; // bad to give pointer types typedefs
		list a;
		typedef char * String;

		typedef struct foo { int a; char x; } bar;
			Here, bar is a typedef for struct { int a; char x; }
			bar s;

gdb (GNU Debugger)
    	 Allows you to get detailed information about a program while it is running

	 run - run a.out; runs program until it ends/crashes
	 quit - quit gdb
	 list - show lines of code around error
	 print - print address of variable

	 You have to compile with -g.
	 gcc -g <file> => a.out.dSYM

	 run gdb on a.out.dSYM
=======================================
10/13
gdb (GNU Debugger)
    
    To use gdb, you must compile using the -g flag with gcc.

    Basic usage: $ gdb <PROGRAM>

    Commands from in the gdb shell

    	     run: runs the pr ogram until it ends/crashes

	     list: show the lines of code run around a crash
	     [-c] flag shows lines around list	    
 
	     print <var>: print a variable

	     backtrace: show the current stack

    Can set break points	     	   
    (gdb) break 10 (breaks on line 10)

valgrind
	Debugging tools specializing in memory values. Use the -g flag to gcc to enable valgrind.

	valgrind --leak-check=yes ./a.out

	Run valgrind and get output, runs a.out

Each .c file needs to be compiled with -g
==========================================
10/18
redefinition errors when you include a file twice

#
	Used to provide prepocessor instructions
	
	These directives are handled before the compiler really kicks in
 
	#include <LIBRARY> | "LIBRARY"
		 link libraries to your code

	essentially placeholder for library
	copy + paste
	
	=======================================
	#define <NAME> <VALUE>
		replace all occurances of NAME with VALUE

		#define TRUE 1

		macros:
			#define SQUARE(x) x * x
			...
			int y = SQUARE(9); ==> int y = 9 * 9;

	conditional statement:
		#ifndef <identifier>
		<code>
		#endif

		If the identifier has been defined, ignore all the code up until the endif statement.

	sranddev(); // randomly seeds the random generator
==============================================
10/20

Aim: a bit of operators

Do Now: >> and << are binary operators, test them with small integers and see if you can figure out what they do.

Left shift and right shift will not overflow endbits into adjacent memory.

~ negation
Flip every bit.

| or
  ex: a | b
  
	Perform or for each pair of bits in (a, b)

& and
  ex: a & b
  
	Perform and for each pair of bits in (a, b)

^ xor
  ex: a ^ b

      Perform xor for each pair of bits in (a, b)
1) a = a ^ b
2) b = a ^ b
3) a = a ^ b
====================================================
10/21
Aim: File this under useful information.

Do Now: What are the different kinds of file permissions?
read, write, execute, byte, append

3 types:
  read, write, execute

Permissions can be represented as 3-digit binary #s, or 1-digit octal #s

	    100 <==> 4 => read only
	    111 <==> 7 -> read, write, execute

There are 3 permission "areas"

      user, group, others

      each area can have its own permissions:

      644 => user: read + write, group: read, other:read 

File table
     A list of all files used by a program while it is running.
     contains basic information like the file's location and size

     The file table has a limited size, which is a power of 2 and
     commonly 256. getdtablesize() will return this value

     Each file is given an integer index, starting at 0, this is referred
     to as the file descriptor

     There are 3 files always open in the table:
     	   0 or STDIN_FILENO: stdin
	   1 or STDOUT_FILENO: stdout
	   2 or STDERR_FILENO: stderr

========================================================
10/24
-1 can't be a file descriptor
int open(char *pathname, int flags)

can close the 3 streams automatically opened for you

open - <fcntl.h>
     Add a file to the file table and returns its file descriptor
     extra error info can be found in errno

     	   errno is an int variable that can be found in <errno.h>, using strerror (string.h)
	   on errno that will return a string description of the error

     open( <PATH>, <FLAGS>, <MODE>)

     mode
	Only used when creating a file. Set the new file's permissions using a 3 digit octal #
	octal #'s have a leading 0
	      0644, 0777 ...
     strerror(errno) - returns error

     flags

	O_RDONLY
	O_WRONLY
	O_RDWR
	O_APPEND
	O_TRUNC - start at beginning of file
	O_CREAT - creates file if it doesn't exist
	O_EXCL - when combined with O_CREAT, will return an error if the file exists
	(exclusive)
	Each flag is a #, to combine flags we use bitwise

	O_WRONLY = 1   	      00000001
	O_APPEND = 8	      00001000
	O_WRONLY | O_APPEND = 00001001

close - <unistd.h>
      Remove a file from the file table.
      Takes file descriptor
      Returns 0 if successful. Returns -1 and sets errno if unsuccessful

umask - <sys/stat.h>

      set the file creation permission mask

      by default, created files are not given the exact permissions provided in the mode argument to open.
      some perms are automatically shutoff.

      umask is app using bitwise negation on mask,
      then bitwise and-ing it to the mode

      	   new_permissions = ~mask & mode

      the default umask is 0022.

      umask( <MASK> );
      	     You can define the umask using a 3 digit octal #

read - <unistd.h>
     Read in data from a file

     read( <FILE DESCRIPTOR>, <BUFFER>, <AMOUNT> )

     read( fd, buff, n)

     Read n bytes from the fd's file and put that data into buffer

     Returns the number of bytes actually read. Returns - 1 and sets errno if unsuccessful.

     Buffer must be a pointer.

write - <unistd.h>
      Write data to a file

      write( <FILE DESCRIPTOR>, <BUFFER>, <AMOUNT> )

      write( fd, buff, n)

      Write n bytes from buff into fd's file

      Returns number of bytes actually written. Returns -1 and sets errno if unsuccessful.

      BUFFER must be a pointer.
=====================================================
10/27

Aim: Seek and ye shall find

Do Now: Prepare for Demo!

lseek - <unistd.h>

      Set the current position in an open file
      
      lseek(<FILE DESCRIPTOR>, <OFFSET>, <WHENCE>)

      whence - where we set the offset from
      
	SEEk_SET
		offset evaluated from beg of file
	SEEK_CUR
		offset is relative to the current position of the file
	SEEK_END
		offset is evaluated from end of file
			
      offset - number off bytes to start from whence
      can be neg.

      returns the number of bytes the cur position is from the beg of file or -1

      can go past the end of file, will change the size of the file if written
=========================================================
size, permissions, and time of last access
=========================================================
Aim: where do compsci priests live? - In directory!
sprintf