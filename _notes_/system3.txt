11/5

Aim: How do we flag down a resource?

system v ipc
posix

semaphores (edsger dijkstra)

	   ipc construct used to control access to a shared resource
	   (like a file or shared memory).

	   essentially, a semaphore is a counter that represents how many processes can access
	   a resource at any given time.

	   If a semaphore has a value of 3, then it can have 3 active "users".

	   If a semaphore has a value of 0, then it is unavailable.

	   value of 1 - mutex

	   Most semaphore operations are "atomic", meaning they will not be split up into multiple processor instructions.

Semaphore operations:

	  Create a semaphore

	  Set an initial value

	  Up(S) / V(S)
	  	Release the semaphore to signal you are done with its associated resource.

		pseudocode:
			S++

	Down(S) / P(S)
		Attempt to take the semaphore.

		If the semaphore is 0, wait for it to be available

		while ( S == 0 ) {
		      block
		}
		S--

	Remove a semaphore

	Semaphores in C - <sys/types.h> <sys/ipc.h> <sys/sem.h>

	semget

		Create/get access to a semaphore.

		This is not the same as Up(s), it does not modify the semaphore

		Returns a semaphore descriptor or -1 (errno)

		semget( <KEY>, <AMOUNT>, <FLAGS> )

			Key
				Unique semaphore identifier (use ftok)

			Amount
				Semaphores are stored as sets with potentially many semaphores together.
				This parameter sets the number of semaphores to create/get.

			Flags
				Includes permissions for the semaphore.
				Combine with bitwise or

				IPC_CREAT: create the semaphore and set the value to 0.
				IPC_EXCL: fail if semaphore already created

				int semd;
				semd = semget( ftok(), 1, IPC_CREAT | 0664);
==========================================================================
Aim: What's a semaphore - to control resources


Semaphore code
	  semctl - <sys/types.h> <sys/ipc.h> <sys/sem.h>

	  	 Control the semaphore, including:
		 	 Set the semaphore value
			 Remove the semaphore
			 Get current value
			 Get information about semaphore

		semctl(<DESCRIPTOR>, <INDEX>, <OPERATION>, <DATA)

			Descriptor
				Return value of semget
			Index
				Index of the semaphore you want to control in teh semaphore set identified by the descriptor.
				For a single semaphore set, 0.
			Operation
				One of the following constants (others as well)
				IPC_RMID: remove the semaphore
				SETVAL: Set the value (requires DATA)
				SETALL: Set the value of every semaphore in the set. (requires DAYA)
				GETVAL: Return the value
				IPC_STAT: Populate buffer with informaiton about the semaphore. (requires DATA)

			DATA: Variable for setting/storing information about the semaphore
			      (data type: union semun)

			      You have to declare this union in your main c file on linux machines.

			      union semun {
			      	    int val;
				    struct semid_ds *buf;
				    unsigned short *array;
				    struct seminfo *__buf;
			      }
			      will only hold one of the items
			      size is max size of large element

			      requires declaration on Linux

	semop
		Perform semaphore operations (like Up/Down)
		All operations performed via semop are atomic.

	operations
		A pointer to a struct sembuf value

		struct sembuf {
		       short sem_op;
		       short sem_num;
		       short sem_flag;
		};

		sem_num
			The index of the semaphore you want to work on.

		sem_op
			-1: Down(S)
			1: Up(S)

			Any -/+ will work, you will be requesting/releasing that value from the semaphore.
			0: Wailt until the semaphore reaches 0.

		sem_flag
			SEM_UNDO: Allow the OS to undo the given operation.
				  Useful in the event that a program exits before it could release
				  a semaphore.
			IPC_NOWAIT: Instead of waiting for the semaphore to be available, return an error.
==========================================
11/7/16

Aim: What goes Up really should come down.
==========================================
11/12/16
Aim: Ceci n'est pas une pipe.

Pipe
	A conduit betwen 2 separate processes.

	Pipes have 2 ends, a read end and a write end.

	Pipes are unidirectional. (a single pipe must be either read or write only in a process)

	Pipes act just like files.

	You can transfer any data you like through a pipes using read/write.

	Unnamed pipes have no external identification.

	pipe - <unistd.h>
	     Creates an unnamed pipe.

	     Returns 0 if the pipe was created, -1 if not.

	     Opens both ends of the pipe as files.

	     pipe( int descriptors[2] )

	     	   descriptors
			Array that will contain the descriptors for each end of the pipe.
================================================
11/13/16
Aim: A pipe by any other name...

Named Pipes
      Also known as FIFOs.

      Same as unnamed pipes except FIFOs have a name that can be used to identify them via different programs.

      Like unnamed pipes. FIFOs are unidirectional.

      mkfifo
	Shell command to make a FIFO

	$ mkfifo <pipe name>

      mkfifo - <sys/types.h> <sys/stat.h>

      	     creates a fifo
	     returns 0 on success, -1 on failure
	     created, NOT opened
	     acts like a regular file, can use open, read, write, and close on it.
	     mkfifo( <name>, <permissions> )
	     FIFOs will block on open until both ends of the pipe have a connection.
====================================
11/14/16

Aim: Always remember to tip your servers

Server/Client Paradigms

	      Handshake
		A procedure to ensure that a connection has been established

		Both ends of the connection must verify that they can send
		and receive data to and from each other.

	WKP - well known pipe

	Basic Handshake Procedure:
	      1) Server creates a FIFO (Well Known Pipe)

	      2) Server waits for a connection

	      3) Client creates a "private" FIFO

	      4) Client connects to server and sends the private FIFO name.

	      5) Client waits for a message from the server.

	      6) Server receives client's message and removes the WKP.

	      7) Server connects to client FIFO, sending an initial message.

	      8) Client receives server's message, removes its private pipes

	      9) Client sends a message, verifying the connection
==========================================
11/20/16
Aim: Cisco in an hour

Do Now: What is needed in order for 2 computers to communicate with each other?

Identification
Physical Connection
Send/receive data
Security
Data packaging/Message composition
Connection verification
User interaction

OSI 7-Layer Model
    Used to help conceptualize the different parts of network connections.

The top layer is the most concrete, with each subsequent layer becoming more abstract
(relying less on the physical connections and more on code).

The layers:
    1. Physical
    2. Data link
    3. Network
    4. Transport
    5. Session
    6. Presentation
    7. Application

If you are working on a particular layer, you should not have to think too much about
the other layers.

Physical Layer
	 How computers are physically connected

	 Things like electrons running across wires, radio signals pulsing through the air...

	 A brief history of wired connections
	 
	   Thicknet
		A single Coaxial cable runs throughout the network, "vampire taps" go into the cable
		and leech the data out.

	   Thinnet
		A signle Coaxial cable runs throughout the network, T-Junctions used to split connections

	   In Thicknet and Thinnet, all data is sent to all computers.

	   Each computer added increases the power drain on the entire system,
	   degrading service.
==================================================
11/21/16

Aim: CISCO in an hour Part II: Electric Boogaloo

     	   Thicknet
     	   Thinnet

	   Token Ring
	   	 each computer is connected in a ring to each other.

		 Only one computer has command of network resources at a time. This is called
		 "having the token".

		 The network sends a "token" throughout the ring, which contains the identity of the computer
		 allowed to use the network. All other computers must wait to use the network.

		 No possibility of collisions.

	   Ethernet
		Multiple computers connected to a hub or switch

		Hub
			Broadcasts the data to all the computers

		Switch
			Sends data to a specific computer

		The more computers you add to an ethernet network the greater
		the chance of collisions.

Data Link Layer
     Point-to-point transmission between devices on the same local network.

     Ethernet Connections:
     	      Each device is given a unique 6-byte MAC (Media Access Control) address,
	      this is sent on each network card when it is made.

====================================================
12/22/16

Aim: Cisco in an hour III: In 3-D!

stuydw

Data Link Layer
     Data is packaged into frames

     	  Ethernet Frame:
	  	   <prefix><dest><source><...>< data ><checksum>
		   8B      6B    6B      6B    46-1500B 4B

		   prefix: 10101010 x7 + 10101011

		   destination/source: MAC addresses

		   ...: Information about frame type

		   checksum: to ensure data integrity

	MTU
		Maximum Transmission Unit
		1500 bytes for ethernet

=======================================================
1/3/16
Aim: Cisco in an hour IV: A New Hope

Network Layer
	Transmission of data between two separate networks

	Is not concerned with whether or not data was sent successfully (connectionless).

	Major features of this layer are addressing, routing, and packet forwarding.

	IP (internet protocol) addresses

	   IPv4: 4 byte address
	   	 [0-255] . [0-255] . [0-255] . [0-255]

	Routing is made easier by having IP addresses distributed in blocks.

traceroute

========================================
1/4/16
Aim: Cisco in an hour V for Vendetta

Network Layer

	Data is broken into packets (IPv4)

	     <header info><packet length> <fragment info> <time-to-live> <protocol>
	     	    2B		2B	  4B	    	  1B		 1B
		    <header checksum> <source> <destination> <...> <data>
		    2B	    	      4B       4B	     4B	   20 - 65535 B

	header info: packet type (IPv4/6), header length...

	fragment info: full payloads may be broken up, this will have total # of fragments,
		 which fragment...

	time-to-live: max # of hops before the packet dies

	protocol: TCP/UDP/...

	...: optional information depending on protocol, type etc

	IPv4 MTU is 65,325 B

	IPv6
		Biggest difference is the address space goes from 2^32 --> 2^128

		Addresses are written as 8 groups of 4 hexadecimal digits
			  87ab : 301c : a45d : 2143 : ff87 :: abcd : dead : feed

			  leading 0s are ignored, consecutive 0-groups can be replaced with ::, but only once in an address

			  :: ffff : 149.89.150.100

			  smallest range of IPv6 = IPv4

		Jumbograms
			Increases the MTU to ~4.3 billion (2^32)

		Other improvements in IPv6 make the protocol incompatible with IPv4.
